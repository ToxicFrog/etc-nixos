#!/usr/bin/env bash

: << =cut

=head1 NAME

borg_age -- monitors the age of Borg backups

=head1 CONFIGURATION

This graph only has two mandatory settings:

[borg_age]
  env.backup_prefixes server::24 laptop::24 desktop::72 vm::4 ...
  env.info_cache_dir /path/to/borg/info/cache

Each backup_prefix will be used to query the repo for backups starting with that
prefix, and report the age of the newest one. The number after the :: is the
target backup frequency for that system, in hours.

The backup_info_cache_dir will be searched for 'borg info' cache files; they will
be created as needed if missing, but doing so is very expensive, so it's recommended
to instead create them as part of your backup process, with
$ borg info --json ::$archive_name > $backup_info_cache_dir/$archive_name
This directory should be both readable and writeable by munin.

That said, you will probably also need to set env.BORG_REPO, and, if the repo
is encrypted, env.BORG_PASSPHRASE or env.BORG_PASSCOMMAND. Depending on what the
permissions on the repo are you may also need to set user and group accordingly.

=head1 AUTHOR

Written by Rebecca Kelly (ToxicFrog)

=head1 LICENSE

MIT

=head1 MAGIC MARKERS

 #%# family=contrib

=cut

# TODO: use a munin state file to keep track of what the last values we saw for
# backup age were, and if we can't acquire the lock emit those instead; this
# keeps everything from getting wedged when borg itself hangs. We can use
# MUNIN_STATEFILE for this, maybe.

set -e
shopt -s lastpipe
source "${MUNIN_LIBDIR}/plugins/plugin.sh"
is_multigraph
touch $MUNIN_STATEFILE

function dimension {
  local name="${1//./_}"
  echo "$name.label $2"
  shift 2
  while [[ "$1" ]]; do
    local k="${1%%:*}"
    local v="${1#*:}"
    if [[ $k == cdef ]]; then v="${v//%/$name}"; fi
    echo "$name.$k $v"
    shift
  done
}

function graph {
  local name="$1"
  echo "multigraph borg_$1"
  echo "graph_title $2"
  echo "graph_category backup"
  echo "graph_vlabel $3"
  echo "graph_info $4"
  echo "graph_args $5"
  shift 5
  for prefix in $backup_prefixes; do
    local prefix="${prefix%::*}"
    dimension "${prefix}_${name}" "${prefix}" "$@"
  done
}

if [[ "$1" == "config" ]]; then
  graph age "Backup age" "backup age (hours)" \
    "The age of the most recent archive." \
    "--base 1000 --units-exponent 0" "cdef:%,UN,PREV,%,3600,/,IF"
  graph age_ratio "Backup age ratio" "backup age / target backup frequency" \
    "The age of the most recent backup as a fraction of the target backup frequency. At 1.0 it should be getting backed up right now. >N means you've missed N consecutive backups." \
    "--base 1000 --units-exponent 0" \
    "cdef:%,UN,PREV,%,IF" "warning:1.1" "critical:2.1"
  graph total_size "Backup size" "backup size (bytes)" \
    "The size of the contents of the most recent archive. Does not take into account compression or deduplication -- this is how much disk space you'd need to restore it." \
    "--base 1024" "cdef:%,UN,PREV,%,IF"
  graph dedup_size "Deduplicated size" "deduplicated size (bytes)" \
    "The size of the most recent archive after duplication -- roughly, how much creating this archive increased the total size of the repo by." \
    "--base 1024" "cdef:%,UN,PREV,%,IF" \
    "warning:1073741824" "critical:8589934592"
  graph duration "Backup duration" "duration (minutes)" \
    "How long it took each archive to be created." \
    "--base 1000 --units-exponent 0" "cdef:%,UN,PREV,%,60,/,IF"

  # total size of borg repo
  echo "multigraph borg_repo_size"
  echo "graph_title Borg repo size"
  echo "graph_category backup"
  echo "graph_vlabel repo size (bytes)"
  echo "graph_info The total size of the borg repo on disk, after compression and deduplication."
  echo "graph_args --base 1024"
  dimension borg_repo_size "$BORG_REPO" "cdef:%,UN,PREV,%,IF"

  exit 0
fi

# TODO: if the repo is in use, fail gracefully here rather than failing when
# borg info tries to acquire the lock further down.

export now=$(date +%s)

# json_value key
# reads dynamic variable JSON as input
function json_value {
  echo "$JSON" | jq -r "$@"
}

function fdiv3 {
  printf '%04d' $(( ($1 * 1000) / $2 )) | sed -E 's,(...)$,.\1,'
}

function update_statefile {
  sed -E -i "/^$1\t/ d" $MUNIN_STATEFILE
  # format: prefix start_time original_size stored_size duration
  printf '%s\t%d\t%d\t%d\t%f\n' $1 $2 $3 $4 $5 >> $MUNIN_STATEFILE
}

function values_for_prefix {
  local JSON="$(cat)"
  if [[ ! $JSON ]]; then
    # We weren't able to acquire the lock and/or there's no archives with this
    # prefix. Fetch the latest data from MUNIN_STATEFILE instead so backup
    # age counters keep incrementing.
    local start original_size deduplicated_size duration
    sed -n -E "/^$1\t/ p" $MUNIN_STATEFILE \
    | read _ start original_size deduplicated_size duration || true
  else
    local start=$(json_value ".archives[0].start" | date -f - +%s)
    local original_size=$(json_value ".archives[0].stats.original_size")
    local deduplicated_size=$(json_value ".archives[0].stats.deduplicated_size")
    local duration=$(json_value ".archives[0].duration")
    update_statefile $1 $start $original_size $deduplicated_size $duration
  fi
  echo "AGE ${1}_age.value $(( now - start ))"
  echo "AGERATIO ${1}_age_ratio.value $(fdiv3 $((now-start)) $(($2*3600)) )"
  echo "SIZE ${1}_total_size.value ${original_size}"
  echo "DEDUP ${1}_dedup_size.value ${deduplicated_size}"
  echo "TIME ${1}_duration.value ${duration}"
}

# Retrieve archive info from the JSON cache. If there's no cache hit, ask
# borg for the info and store it in the cache. Note that asking borg for
# info is very slow and on some configurations can time out.
function borg_info_json {
  if [[ ! -f "$info_cache_dir/$1" ]]; then
    borg info "::$1" --json > "$info_cache_dir/$1"
  fi
  cat "$info_cache_dir/$1"
}

{
  echo "AGE multigraph borg_age"
  echo "AGERATIO multigraph borg_age_ratio"
  echo "SIZE multigraph borg_total_size"
  echo "DEDUP multigraph borg_dedup_size"
  echo "TIME multigraph borg_duration"
  for prefix in $backup_prefixes; do
    freq="${prefix#*::}"
    prefix="${prefix%::*}"
    archive="$(borg list --short --prefix "$prefix" | egrep -v '\.checkpoint$' | tail -n1)"
    borg_info_json "$archive" | values_for_prefix "${prefix//./_}" "$freq"
  done
} | sort --key 1,1 --stable | cut -d' ' -f2-
echo "multigraph borg_repo_size"
echo "borg_repo_size.value $(borg info --json | jq -r .cache.stats.unique_csize)"
