#!/usr/bin/env bash

: << =cut

=head1 NAME

http__onhub -- plugin to scrape status information from a Google OnHub

=head1 CONFIGURATION

These are the default settings:

[ssh_host.tld_uptime]
  env.onhub_address onhub.here
  env.name_MAC host.name

=head1 AUTHOR

Written Rebecca Kelly, based on onhub API documentation by Marcus Olsson at
https://github.com/olssonm/google-wifi-api

=head1 LICENSE

MIT

=head1 MAGIC MARKERS

 #%# family=auto
 #%# capabilities=autoconf

=cut

# source $MUNIN_LIBDIR/plugins/plugin.sh

shopt -s lastpipe

### settings ###

myname="$(basename $0)"
host_name="$(echo "$myname" | cut -d_ -f2)"
onhub_address="${onhub_address:=onhub.here}"

if [[ "$1" == "autoconf" ]]; then
  if curl -sf "http://${onhub_address}/api/v1/welcome-mat" >/dev/null; then
    echo yes
  else
    echo "no (could not access http://${onhub_address}/api/v1/welcome-mat)"
  fi
  exit 0
fi

### helper functions used by config ###

HOME="${HOME:=/var/lib/munin}"
STATEFILE="$HOME/${host_name}.${onhub_address}.state"
STAMPFILE="$HOME/${host_name}.${onhub_address}.stamp"
SEENFILE="$HOME/${host_name}.${onhub_address}.seen"

# output the contents of the onhub statefile, fetching it first if stale
# used by both config (to figure out some dimensions) and fetch
function report {
  touch -d "3 minutes ago" "$STAMPFILE"
  if [[ ! ( -e $STATEFILE ) || ( $STATEFILE -ot $STAMPFILE ) ]]; then
    # Probe the onhub.
    # This is very expensive (10+ seconds), so we only do it if the old state
    # is missing or more than two minutes old.
    curl -s -f http://onhub.here/api/v1/diagnostic-report \
      | zcat > "$STATEFILE" || {
        echo "Error fetching state from onhub!"
        exit 1
      }
  fi
  rm -f "$STAMPFILE"

  cat "$STATEFILE" | strings -n 8 -w
}

# dimension name title fields...
# e.g dimension recv rx draw:AREA type:DERIVE min:0
function dimension {
  name="$1"
  echo "$name.label $2"
  shift 2
  while [[ "$1" ]]; do
    local k="${1%:*}"
    local v="${1#*:}"
    if [[ $k == cdef ]]; then v="$name,$v"; fi
    echo "$name.$k $v"
    shift
  done
}

function is-ip {
  echo "$1" | egrep -qx '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+'
}

function is_mac {
  local byte="[0-9a-fA-Z][0-9a-fA-F]"
}

# name-for-wifi MAC
# Emits the display name for the given wifi host.
# Whichever of these it finds first will be the name:
# - name specified by name_$MAC envar
# - hostname recorded by the onhub's DHCP server
# - hostname in the ARP table
# - hostname cached in SEENFILE
# - IP reported by onhub
# - IP recorded in SEENFILE
# - readable mac address
function name-for-wifi {
  local mac="$1"
  local rename="name_${mac}"
  if [[ ${!rename} ]]; then
    echo "${!rename}"
    return 0
  fi

  # Get the IP from the ARP table on the onhub
  local ip=$(report | fgrep -m1 $mac | cut -f1 -d' ')
  local dhcp_name="$(
    report \
    | sed -n -E "/^ *ip_addresses: \"$ip\"/ { n; n; p; }" \
    | cut -d\" -f2 \
    | sed -E s,'-\*\*\*\*+$',"-${ip##*.}",)"
  local dns_name="$(nslookup $ip | egrep -o 'name = .*' | cut -d= -f2 | sed -E 's,\.$,,')"

  local cached_name cached_ip
  if [[ $2 ]]; then
    cached_name="$2";
  else
    cat $SEENFILE | egrep -m1 "^$mac" | read _ _ cached_name;
  fi
  if is-ip "$cached_name"; then
    cached_ip="$cached_name"
    cached_name=""
  elif echo "$cached_name" | egrep -qx "[0-9a-fA-F:]+"; then
    # HACK -- ignored cached name if it's just a MAC
    # stop doing this when we stop recording MACs in the seenfile
    cached_name=""
  fi

  pretty_mac=$(echo "$mac" | sed -E 's,..,\0:,g; s,:$,,')
  local arp_from_mac=$(arp -a | fgrep -m1 " at $pretty_mac" | cut -d' ' -f1)
  local arp_from_ip=$(arp -a | fgrep -m1 " ($ip) " | cut -d' ' -f1)

  for name in "$dhcp_name" "$arp_from_mac" "$arp_from_ip" "$cached_name" "$ip" "$cached_ip" "$pretty_mac"; do
    if [[ $name ]]; then
      echo "$name"
      return 0
    fi
  done
  echo "$mac"
}

# TODO keep track of which ones we've seen before, e.g. in ~/.onhub-seen
# if any in the seen file are missing from the list, emit a dimension for them
# and then emit U for them at fetch time
# if we haven't seen one in a while, based on last_seen_seconds_since_epoch in
# the station_state_update block, expire it from the seen file.
function wifi_strength_dimensions {
  local ts="$(date +%s)"
  rm -f "$SEENFILE.new"
  report | sed -n -E '
    /Station /,/connected time:/ {
      /Station / { s,.*Station ([0-9a-f]+) .*,\1,; p; }
    }' \
  | while read mac; do
    local name=$(name-for-wifi "$mac")
    # the SEENFILE records the MAC address, last seen time, and display name or
    # IP of each host. Entries in the file are expired after not being seen for
    # one week.
    if [[ $name ]]; then
      echo "$mac $ts $name" >> "$SEENFILE.new"
    elif [[ $ip ]]; then
      echo "$mac $ts $ip" >> "$SEENFILE.new"
    else
      echo "$mac $ts $mac" >> "$SEENFILE.new"
    fi
  done

  # Combine the new seenfile with the old, discarding old entries.
  cat "$SEENFILE" >> "$SEENFILE.new"
  local horizon=$(date -d "1 week ago" +%s)
  <"$SEENFILE.new" sort --reverse --stable | uniq -w 12 | while read mac ts name; do
    if (( ts < horizon )); then continue; fi  # remove entries older than horizon
    echo "$mac $ts $(name-for-wifi $mac $name)"
  done >"$SEENFILE"

  # Now generate dimensions
  cat "$SEENFILE" | while read mac ts name; do
    dimension "wifi_power_$mac" "$name" draw:LINE1 type:GAUGE
  done
}

### config implementation ###

if [[ "$1" = "config" ]]; then
  cat <<EOF
host_name $host_name
multigraph onhub_network
graph_title Network size
graph_category network
graph_vlabel number of hosts
graph_info Information about the number of hosts on the network managed by the OnHub.
$(dimension arp_count "ARP table size" type:GAUGE draw:LINE2)
arp_count.info The size of the ARP table, i.e. the number of distinct devices the OnHub has seen on the network, whether or not it gave them an IP address itself.
$(dimension dhcp_count "DHCP lease count" type:GAUGE draw:LINE2)
dhcp_count.info The number of devices the OnHub has given IP addresses to, whether or not they're currently connected.
$(dimension peer_count "DHCP client count" type:GAUGE draw:LINE2)
peer_count.info The number of currently connected peers that the OnHub gave addresses to via DHCP.

multigraph onhub_speed
graph_title WAN speed
graph_category network
graph_vlabel upstream (-) / downstream (+) speed
graph_info This is the maximum WAN speed as measured by the OnHub during its most recent automatic probe.
graph_args --base 1000
$(dimension downstream Downlink draw:AREA type:GAUGE cdef:8,*)
$(dimension upstream Uplink draw:AREA type:GAUGE cdef:8,*)

multigraph onhub_traffic_wan
graph_title Network traffic (WAN)
graph_category network
graph_vlabel bytes per \${graph_period}
graph_info Network traffic on the WAN interface.
graph_args --base 1000
$(dimension wan_recv RX draw:LINE2 type:DERIVE min:0 cdef:256,/)
$(dimension wan_sent TX draw:LINE2 type:DERIVE min:0 cdef:256,/)

multigraph onhub_traffic_lan
graph_title Network traffic (LAN)
graph_category network
graph_vlabel bytes per \${graph_period}
graph_info Network traffic on all the LAN interfaces (cat5, 2.4GHz wifi, and 5GHz wifi) combined.
graph_args --base 1000
$(dimension lan_recv RX draw:LINE2 type:DERIVE min:0 cdef:256,/)
$(dimension lan_sent TX draw:LINE2 type:DERIVE min:0 cdef:256,/)

multigraph onhub_wifi_strength
graph_title Wifi signal strength
graph_category network
graph_vlabel dBm
graph_info Signal strength (in decibel-milliwatts) of connected WiFi peers. If a peer is listed in the legend but has no data for a given time range, it was not connected during that time but had been seen recently by the AP.
graph_args --base 1000
$(wifi_strength_dimensions)
EOF

# upstream.graph yes
# downstream.negative upstream
# lan_sent.graph no
# wan_sent.graph no
# lan_recv.negative lan_sent
# wan_recv.negative wan_sent
  exit 0
fi

### helper functions for fetch ###

function arp-count {
  report | sed -E -n '/\/proc\/net\/arp/,/^$/ p;' | grep br-lan | wc -l
}

function dhcp-count {
  report | fgrep -a "dhcp_lease " | wc -l
}

function peer-count {
  report | fgrep -a "connected: true" | wc -l
}

function speedtest {
  report | fgrep -a "$1_speed_bytes_per_second:" | cut -d: -f2
}

# TODO this breaks after some weeks? of onhub uptime
function ifstat {
  report \
    | sed -E -n '/ip -s -d addr/,/^$/ p;' \
    | sed -E -n "/^[0-9]: $1: /,/^[0-9]/ p;" \
    | sed -E -n "/^    $2: bytes/ { n; p; q; }" \
    | read bytes packets errors dropped _
  # RX and TX bytes values, despite saying "bytes" in the dump, are (a) in hex
  # and (b) actually (bytes * 256). At least, the values are 256 times higher
  # than the same network traffic reported by the other end.
  # We use a cdef to fix this.
  printf "%d" 0x${bytes:=0}
}

function wifi_strength_values {
  report | sed -n -E '
    /Station /,/connected time:/ {
      /Station / { s,.*Station ([0-9a-f]+) .*,\1,; p; }
      /signal: / { s,signal:[[:space:]]+(-?[0-9]+) dBm,\1,; p; }
    }' | while read mac; do
      read dBm
      echo "wifi_power_$mac.value $dBm"
    done
}

### fetch implementation ###

cat <<EOF
multigraph onhub_network
arp_count.value $(arp-count)
dhcp_count.value $(dhcp-count)
peer_count.value $(peer-count)
multigraph onhub_speed
upstream.value $(speedtest upload)
downstream.value $(speedtest download)
multigraph onhub_traffic_lan
lan_sent.value $(ifstat br-lan TX)
lan_recv.value $(ifstat br-lan RX)
multigraph onhub_traffic_wan
wan_sent.value $(ifstat wan0 TX)
wan_recv.value $(ifstat wan0 RX)
multigraph onhub_wifi_strength
$(wifi_strength_values)
EOF

  # graphs:
  # size of ARP table: /proc/net/arp
  # number of DHCP leases: dhcp_lease { ... }
  #   both also let us match up IPs to MACs
  # bandwidth and connection strength of wifi clients: "station dump"
  #   uses MACs
  #   there does not appear to be an equivalent for wired clients
  # network connection status:
  #   infra_state.wan_speed_test_results
  #   network_service_state.wan_state
  # DHCP clients:
  #   station_state_update.station_info.*
  #   contains mDNS name, DHCP hostname, and IP address
  #   connected: true if still connected
  #   wireless: true if wifi
  #   not everything has names
  #   lets us map name to IP (if any names are specified)
  # per-interface bandwidth:
  #   ip -s -d addr
  #   wan0 is the WAN
  #   lan0 is the cat5
  #   wlan-2400mhz and wlan-5000mhz are the two bands of wifi
  #   br-lan combines lan0 and the wifi interfaces

# This requires us to probe the onhub to run "configure" which is not great
# graph_title Per-device wifi traffic
# graph_category network
# graph_args --base 1000
# graph_vlabel bits sent (-) / received (+) by peer
# $(output_wifi_bandwidth_labels)
# send_$name.label $name
# send_$name.graph no
# send_$name.type DERIVE
# send_$name.min 0
# send_$name.cdef wifi_send_$name,8,*
# recv_$name.label $name
# recv_$name.draw AREASTACK
# recv_$name.type DERIVE
# recv_$name.min 0
# recv_$name.cdef wifi_recv_$name,8,*
# recv_$name.negative send_$name
# graph_title Wifi signal strength
# ...similar to above...
