#!/usr/bin/env bash

set -e
ETC=/backup/buprc.d

export \
  GIT_AUTHOR_NAME="bup"
  GIT_AUTHOR_EMAIL="root@$(hostname)" \
  GIT_COMMITTER_NAME="bup-cron" \
  GIT_COMMITTER_EMAIL="root@$(hostname)"

function clear-settings() {
  for var in HOST PORT MIN_AGE MAX_AGE CHECK_TAG BRANCH CONNECT; do
    unset $var
    declare -x "$var="
  done
  for var in HOSTS UPDATE_TAGS INDEX SAVE EXCLUDE; do
    unset $var
    declare -A -x "$var=()"
  done
}

# older-than $ref $date
function older-than() {
  ! git --git-dir "$BUP_DIR" log --since "$2" "$1" | egrep -qv .
}

function repo-size() {
  du -c -s --apparent-size --bytes "$BUP_DIR/objects/pack"/*.pack | tail -n1 | cut -f1
}

function include() {
  . "$ETC/backups.d/$1"
}

function bup_index() {
  EXCLUDE_ARGS=()
  for pattern in "${EXCLUDE[@]}"; do
    EXCLUDE_ARGS+=("--exclude-rx=$pattern")
  done

  bup -d "$BUP_DIR" on "$HOST:$PORT" index --update "${EXCLUDE_ARGS[@]}" "${INDEX[@]}"
}

function bup_save() {
  bup -d "$BUP_DIR" on "$HOST:$PORT" save $BUP_FLAGS -n "$BRANCH" "${SAVE[@]}"
}

if [[ $DRY_RUN ]]; then
  function git() {
    echo "[dry-run]" git "$@" >&2
  }
  function bup() {
    echo "[dry-run]" bup "$@" >&2
  }
fi

for backup in "$ETC/backups.d"/*; do
  clear-settings
  . "$ETC/defaults"
  . "$backup"

  # Check if the backup is old enough to need updating.
  echo "Checking $CHECK_TAG"
  if ! older-than "$CHECK_TAG" "$MIN_AGE"; then
    echo " ✔ Backup is up to date."
    continue
  fi

  echo " ☐ Checking connectivity"
  for try_host in "${HOSTS[@]}"; do
    hostname="${try_host%:*}"
    hostport="${try_host#*:}"
    if ssh -p "$hostport" "$hostname" true 2>/dev/null; then
      export HOST="$hostname"
      export PORT="$hostport"
      echo " ☐ Successfully connected to $HOST:$PORT."
      break
    fi
  done
  if [[ ! $HOST ]]; then
    echo " ✘ No hosts for $(basename backup) could be reached (tried ${HOSTS[@]})."
    continue
  fi

  # Update the index.
  echo " ☐ Indexing"
  if ! bup_index; then
    echo " ✘ Error running 'bup index'"
    continue
  fi

  # Get the old repo size.
  old_size=$(repo-size)

  # Get the old branch head so we can know if bup save worked.
  old_head=$(git --git-dir "$BUP_DIR" show-ref -s "$BRANCH" || echo "00000000")
  echo " ☐ Saving"
  if ! bup_save; then
    echo " ! Warning: 'bup save' reported errors while saving"
  fi
  new_head=$(git --git-dir "$BUP_DIR" show-ref -s "$BRANCH")
  if [[ $new_head == $old_head ]]; then
    echo " ✘ Error running 'bup save': branch head not updated"
    continue
  fi
  new_tree="$(git --git-dir "$BUP_DIR" log -n 1 --format='%T' "$BRANCH")"

  # Calculate the size delta and update the commit message accordingly.
  new_size=$(repo-size)
    echo " ☐ Writing commit tree"
  new_sha1=$(git --git-dir "$BUP_DIR" commit-tree \
    -p "$old_head" -m "bup save $CHECK_TAG: +$(( (new_size-old_size)/1024/1024 ))M" \
    "$new_tree")
  git --git-dir "$BUP_DIR" branch -f "$BRANCH" "$new_sha1"

  # Update tags.
  for tag in "${UPDATE_TAGS[@]}"; do
    echo " ☐ Updating tag $tag"
    git --git-dir "$BUP_DIR" tag -f "$tag" "$BRANCH" >/dev/null
  done
  echo " ✔ Backup complete! Size: $(( (new_size-old_size)/1024/1024 ))M"
done
